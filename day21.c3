import std::io, std::time, std::collections, std::math;

fn void! main()
{
    @pool() {
        Clock c = clock::now();
        io::printfn("- Part1: %d - %s", solve(&part1)!, c.mark());
        io::printfn("- Part2: %d - %s", solve(&part2)!, c.mark());
    };
}

def Calc = fn long(long[<NUMS*NUMS>]);
fn long! solve(Calc calc)
{
    String input = (String) file::load_temp("input")!;
    long[<NUMS * NUMS>] counts = 0;

    foreach(line : input.trim().tsplit("\n")) {
        int num = line.trim()[..^2].to_int()!;
        List(<int>) chars;
        chars.push(encode('A'));
        foreach(c: line.trim()) {
            chars.push(encode(c));
        }

        for(long i; i < chars.len()-1; i++) {
            int a = chars[i];
            int b = chars[i+1];
            counts[a * NUMS + b] += num;
        }
    }

    return calc(counts);
}

fn long part1(long[<NUMS*NUMS>] counts) => (counts*LUT3).sum();
fn long part2(long[<NUMS*NUMS>] counts) => (counts*LUT26).sum();

fn int encode(char c) => c % 16 + (c / 64) * 9;  

const long NUMS = 11; // [0-9,A]

// every pre-calculated paths on the directional keypad
const long[<NUMS*NUMS>] LUT3 = {
    1, 25, 12, 19, 26, 13, 20, 27, 14, 21, 10, 21, 1, 10, 11, 12, 19, 20, 13, 20, 21, 22, 16, 18,
    1, 10, 21, 12, 19, 22, 13, 20, 17, 21, 19, 18, 1, 22, 21, 12, 23, 22, 13, 16, 22, 16, 17, 18,
    1, 10, 11, 12, 19, 20, 23, 17, 21, 16, 17, 18, 1, 10, 21, 12, 19, 18, 22, 22, 21, 16, 19, 18,
    1, 22, 21, 12, 17, 23, 17, 18, 19, 16, 17, 18, 1, 10, 11, 24, 18, 22, 17, 18, 21, 16, 17, 18,
    1, 10, 19, 23, 23, 22, 17, 22, 21, 16, 19, 18, 1, 18, 18, 26, 21, 12, 27, 22, 13, 28, 23, 14,
    1,
};

// every pre-calculated paths on the numeric keypad
const long[<NUMS*NUMS>] LUT26 = {
    1,
    31420065369,
    14752615084,
    24095973437,
    31420065370,
    14752615085,
    24095973438,
    31420065371,
    14752615086,
    24095973439,
    14287938116,
    27052881363,
    1,
    14287938116,
    14287938117,
    14752615084,
    24095973437,
    24095973438,
    14752615085,
    24095973438,
    24095973439,
    27052881364,
    20790420654,
    22411052532,
    1,
    14287938116,
    28154654777,
    14752615084,
    24095973437,
    28154654778,
    14752615085,
    24095973438,
    22778092491,
    27622800565,
    22411052533,
    22411052532,
    1,
    28154654778,
    28154654777,
    14752615084,
    28154654779,
    28154654778,
    14752615085,
    20790420654,
    27052881364,
    20790420654,
    22778092491,
    22778092492,
    1,
    14287938116,
    14287938117,
    14752615084,
    24095973437,
    24095973438,
    27052881365,
    20790420655,
    27622800565,
    20790420654,
    22778092491,
    22411052532,
    1,
    14287938116,
    28154654777,
    14752615084,
    24095973437,
    22778092492,
    27622800566,
    27622800566,
    27622800565,
    20790420654,
    22411052533,
    22411052532,
    1,
    28154654778,
    28154654777,
    14752615084,
    20790420655,
    27052881365,
    20790420655,
    22778092492,
    22778092493,
    20790420654,
    22778092491,
    22778092492,
    1,
    14287938116,
    14287938117,
    27052881366,
    20790420656,
    27622800566,
    20790420655,
    22778092492,
    27622800565,
    20790420654,
    22778092491,
    22411052532,
    1,
    14287938116,
    22778092493,
    27622800567,
    27622800567,
    27622800566,
    20790420655,
    27622800566,
    27622800565,
    20790420654,
    22411052533,
    22411052532,
    1,
    20790420656,
    22411052532,
    31420065370,
    28154654777,
    14752615084,
    31420065371,
    28154654778,
    14752615085,
    31420065372,
    28154654779,
    14752615086,
    1,
};

